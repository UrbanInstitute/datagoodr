---
title: "Research Guide"
format:
  html:
    embed-resources: true
    toc: true
    toc-location: body
    toc-depth: 5
    toc-expand: true
  pdf: default
execute:
  keep-md: true
---

<br>


<br><br>

```{r setup, warning=F, message=F, include=F}
library( htmltools )
library( dplyr )
library( purrr )
library( pointblank )
library( knitr )
library( gt )
library( kableExtra )
library( psych )
library( data.table )
library( gt)
library( treemap )
library( plotly )
library( wordcloud )
library( wordcloud2 )
library( tm )
library( stringr)
```

```{r, echo=F, message=FALSE, include=FALSE}

libs <- c("dplyr")

lapply(libs, require, character.only = TRUE)

# source functions 
files <-
  c("R//00-utils.R",  #has some useful internal functions
    "R//02-02-ingest-utils.R", #has some useful internal functions
    "R//03-00-BUILD-RG-DICT.R",
    "R//03-01-create-sections.R",
    "R//03-01-layouts.R",
    "R//03-02-treemap.R",
    "R//03-03-booleplot.R",
    "R//03-04-wordcloud.R"
  )

files <- paste0("..//", files) # remove "..//" when working on document, keep for render

lapply(files, source)


# import DGF - to be read in through render quarto later
dgf <- readxl::read_xlsx("../DGF.xlsx" )



# Each variable type needs its own section because each plot type
# needs its own fig width and height. 
# To add a new variable type, 
# 1. add new vtype_class to the dgf
# 2. add new layout to R/layouts.R
# 3. add necessary funciton that the new layout object needs to read
# 4. add new layout div tags to the end of this file 
# 5. add new dfg.TYPE data frame and section to this file to run create_all_sections( dgf.TYPE )

dgf.log <-  dgf[dgf$vtype_class == "logical", ]
dgf.fact <-  dgf[dgf$vtype_class == "factor", ]
dgf.chr <-  dgf[dgf$vtype_class == "character", ]
dgf.num <-  dgf[dgf$vtype_class == "numeric", ]


```


## Logical

```{r logical, results="asis"}
# dgf.logical <- dgf[14:15,  ]
create_all_sections( dgf.log )

```

## Factor

```{r factor, results="asis"}
# dgf.factor <- dgf[6:13,  ]
create_all_sections( dgf.fact )
```

## Numeric 

```{r numeric, results="asis", fig.width=8, fig.height=2}
# dgf.num <- dgf[22:27,  ]
create_all_sections( dgf.num )
```

## Character

```{r character, results="asis", fig.width=8, fig.height=6}
# dgf.chr <- dgf[c(1:5, 20),  ]
create_all_sections( dgf.chr )
```




## Testing Section 


### Histogram Styles

```{r, echo=F, fig.width=8, fig.height=2, eval =FALSE}
x <- dat$F9_10_ASSET_TOT_BOY
t <- hg_dat(x)
hg_plot(t)

# should the labels be the min and max of the first and last
# bin labels, not their averages? 

# (-1.35e+04,5.39e+05]
# (1.29e+07,1.35e+07]
```

```{r, echo=F, fig.width=8, fig.height=2, eval=FALSE}

# x <- dat$F9_10_ASSET_TOT_BOY |> na.omit()
# x <- x[ x >= quantile(x,0.05) & x <= quantile(x,0.95) ]

x <- 
  c( abs(rnorm(100000,-10000,10000)),
     rnorm(100000,100000,20000),
     rnorm(100000,1000000,20000) )


h <- hist( x, 100, plot=F )
d <- h$density/sum(h$density)
y <- h$counts
xx <- h$mids

par( mar=c(2,0,1,0) )
plot( xx, d, 
      type="h", bty="n", lwd=4, axes=F, col="gray30" )

x1 <- xx[1]
x2 <- xx[length(xx)]
min.x <- x1 |> make3()
max.x <- x2 |> make3()

axis( side=1, at=c(x1,x2), 
      labels=c(min.x,max.x), cex.axis=1.3,
      line=-0.5, tick=F, font=2, col.axis="gray40" )

avex <- mean(x, na.rm=T)
medx <- median(x, na.rm=T)

abline( v=avex, lty=3, lwd=2, col="firebrick" )
abline( v=medx, lty=3, lwd=2, col="steelblue" )
axis( side=1, at=medx, label="median", font=2,
      col.axis="steelblue", tick=F, line=-0.5 )
axis( side=1, at=avex, label="mean", font=2, 
      col.axis="firebrick", tick=F, line=-0.5 )


```

```{r, results="asis", eval=FALSE, include = F, eval = FALSE}
## Update with new names 
## dd == data dictionary 
for( i in 1:nrow(dd) )
{
  vname <- dd$vname[i]
  v <- as.list(dd[i, ]) # total row from dgf then convert to list 
  vtype <- dd$data_type[i]
  # vlabel <- dd$dd_f_levels[i]
  # vdesc <- dd$vdesc[i]
  # scope <- dd$scope[i] # ignore for now - example of imported feild 
  # loc <- dd$loc[i] #ignore for now - example of imported feild 
  
  ftable <- NULL
  
  if( vtype == "factor" )
  { ftable <- get_ftable( dd$ftable[i] ) }
  
  print( 
    c(vname=vname,
    # v=v,
    vtype=vtype ))
    # vlabel=vlabel,
    # vdesc=vdesc,
    # scope=scope,
    # loc=loc,
    # ftable=ftable )
}

cat( "{{< pagebreak >}} \n\n")

```

<br>

<hr>

<br>

```{r, eval=F, include = F}
#| echo: false

get_section <- function( row.name )
{
  ds <- dplyr::filter( dfg, vname== row.name )
  create_section( x1=ds$desc, x2=ds$k, x3=ds$loc )
}

#new version of print v - get_section = create_section 
print_dd <- function( dfg, vars=c("r2","r2","r3"), group.name=NULL )
{
   # for( i in vars )
   # {
   #   get_section( row.name=i )
   # }
   dfg2 <- dplyr::filter( dfg, var_name %in% vars )
   sapply( dfg2, get_section )
}
```




```{r, eval=F, echo=F}

# TO CHANGE IMAGE DIM
# FOR A SINGLE PLOT 

subchunkify <- function( fx, VNAME, fig_height=7, fig_width=5 ) {
  
  g_deparsed <- 
    paste0( deparse( function() {fx} ), collapse = '' )
  
  # returns:  function(){make3}

  sub_chunk <- paste0("
  
    `","``{r ", VNAME, ", fig.height=", fig_height, ", fig.width=", fig_width, ",
    echo=FALSE}", 
    
    "\n(", g_deparsed, ")()",
  
    "\n`","``" )

  cat(knitr::knit(text = knitr::knit_expand(text = sub_chunk), quiet = TRUE))
}
```



<br> <br>

<hr>

<br> <br>

<link href='https://fonts.googleapis.com/css?family=Fira Code' rel='stylesheet'> <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Anonymous+Pro" />

```{=html}
<style>

@import url('https://fonts.cdnfonts.com/css/aharoni');

.parent {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: auto;  
    grid-column-gap: 20px;
  grid-row-gap: 10px;
  grid-template-areas:
    "a a a"
    "b b b"
    "c d d"
    "e f g" 
    "h h h"
    "i i i"
    "j k k"
    "m o o"
    "n o o"
    "p p p";
}


.div1 { 
  grid-area: a;
  padding-bottom: 15px;
}

.div2 { 
    grid-area: b;
    padding-left: 30px;
}

.div3 { 
    grid-area: c;
    padding-left: 30px;
}

.div4 { 
    grid-area: d;
    padding-left: 20px;
}

.div5 { 
    grid-area: e;
    padding-left: 30px;
}

.div6 { 
    grid-area: f;
    padding-left: 20px;
}

.div7 { 
    grid-area: f;
    padding-left: 20px;
}

.div8 { 
    grid-area: h;
    padding-left: 30px;
}

.div9 { 
    grid-area: g;
    padding-left: 50px;
}

.div10 { 
    grid-area: e;
    padding-left: 30px;
}

.div11 { 
    grid-area: h;
    padding-left: 20px;
}

.div12 { 
    grid-area: f;
    padding-left: 30px;
}

.div13 { 
    grid-area: i;
    padding-left: 30px;
}

.div14 { 
    grid-area: e;
    padding-left: 30px;
}

.div15 { 
    grid-area: f;
    padding-left: 20px;
}

.div16 { 
    grid-area: h;
    padding-left: 20px;
}

.div17 { 
    grid-area: e;
    padding-left: 20px;
}

.div18 { 
    grid-area: f;
    padding-left: 20px;
}

.div19 { 
    grid-area: i;
    padding-left: 20px;
}
h1.title { 
  color: black;
  font-family: 'Aharoni', sans-serif;
  font-size: 2.5em; }
h2.anchored { color: lightgray; }
h3.anchored { color: gray; }

h4 {
    /* text-decoration: underline; */
    /* text-underline-offset: 10px; */
    /* text-decoration-thickness: 2px; */
    font-family: Georgia, Times, "Times New Roman", serif; 
    /* font-family: 'Fira Code'; */
    /* font-family: 'Aharoni', sans-serif; */
    font-size: 2.2em;
    font-weight: 700;  
    /* line-height: 120px; */ 
    border-bottom:3px solid #000; 
    /* font-size:14px; */
    /* line-height:12px; */
    width:100%;
}

h5 { font-size: 0.9em; }

.div2 p { 
    font-family: Verdana;
    font-size: 1.1em;
}

.div3 td { 
    font-family: "Aharoni", sans-serif;
    font-size: 0.9em;
}

.div4 p { 
    font-family: "Calibri", sans-serif;
    font-size: 1.1em;
}

.div9 p { 
    font-family: "Anonymous Pro";
    font-size: 0.8em;
    color: gray;
    text-align: justify;
}

.div9 strong { 
    font-family: "Calibri", sans-serif;
    font-size: 1.6em;
    color: black;
}


.div4 table {
    margin-left: 20px;
    font-family: "Anonymous Pro";
}

.div5 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div6 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div7 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div12 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div13 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}

.div14 td { 
    font-family: "Anonymous Pro";
    font-size: 0.9em;
}


.div5 table {
    margin-left: 20px;
}

.table>tbody {
    border-top: none;
}

.table>:not(caption)>*>* {
    padding: 0rem 0rem;
}

tbody, tfoot, tr, td, th {
    border-color: inherit;
    border-style: none; 
    border-width: 0;
}


.div5 tr {
  border-bottom: 1px solid;
  border-color: #D3D3D3;
}

.div5 th {
  display:none;
}

.div6 tr {
  border-bottom: 1px solid;
  border-color: #D3D3D3;
}

.div6 th {
  display:none;
}

.div7 tr {
  border-bottom: 1px solid;
  border-color: #D3D3D3;
}

.div7 th {
  display:none;
}

.div8 img, svg {
    /* vertical-align: bottom;*/
    align-self: end;
    justify-self: end;
}

.div9 img, svg {
    /* vertical-align: bottom;*/
    align-self: end;
    justify-self: end;
}

#pb_agent .gt_table {
    border-top-width: 0px; 
    /* border-top-color: #A8A8A8; */
}  

#pb_agent .gt_title {
    font-size: 1.3em !important;
}

#pb_agent .gt_left { color: black !important; }

@media print {
   body {
   display:table;
   table-layout:fixed;
   padding-top:2.5cm;
   padding-bottom:3cm;
   padding-left:1.5cm;
   padding-right:1.5cm;
   height:auto;
    }
}

</style>
```
```{r, eval=F, echo=F}
#############
#############       NUMERIC 
#############

#   num layout
#   ----------
#    "a a a"  
#    "b b b"  
#    "c d d"  
#    "e f g"  
#    "h i i"   
#
#    a = div1
#    b = div2
#    c = div3
#    d = div4
#    e = div5
#    f = div6
#    g = div7
#    h = div8
#    i = div9

# FIRST COLUMN: divider to use
# SECOND COLUMN: which column of DGF to use for source
# THIRD COLUMN: title to add to the section
# FOURTH COLUMN: function to use

layout.num <- 
 c( "div2 ;;  dd_label      ;;  LABEL           ;;  v_to_txt",
    "div3 ;;  data_type     ;;  DATA TYPE       ;;  v_to_txt",
    "div4 ;;  dd_desc       ;;  DESCRIPTION     ;;  v_to_txt",
    "div5 ;;  rg_stats      ;;  PROPERTIES      ;;  get_properties",  
    "div6 ;;  rg_stats      ;;  QUANTILES       ;;  get_quantiles",
    "div7 ;;  rg_stats      ;;  STATISTICS      ;;  get_statistics",
    "div8 ;;  rg_graphics   ;;  HISTOGRAM       ;;  get_hist",
    "div9 ;;  rg_sample     ;;  EXAMPLE VALUES  ;;  get_examples"  )


#############
#############       FACTOR 
#############

#   fct layout
#   ----------
#    "a a a"  
#    "b b b"  
#    "c d d"   
#    "n p p"  
#    "o p p"  
#
#    a = div1
#    b = div2
#    c = div3
#    d = div4
#    n = div13
#    o = div14
#    p = div15

#############
#############       CHARACTER 
#############

#   chr layout
#   ----------
#    "a a a"  
#    "b b b"  
#    "c d d"   
#    "h i i"  
#    "j k k"   
#
#    a = div1
#    b = div2
#    c = div3
#    d = div4
#    g = div7
#    h = div8
#    i = div9
#    j = div10
#    k = div11

```
